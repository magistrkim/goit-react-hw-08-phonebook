{"version":3,"file":"static/js/248.807e0224.chunk.js","mappings":"6MACA,EAA0B,4BAA1B,EAA8D,0BAA9D,EAAgG,0B,oCCahG,EAVkB,SAAC,GAAuC,IAArCA,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,aAAiBC,ECH9B,SAAkCC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACIE,EAAKC,EADLC,GAAS,EAAAC,EAAA,GAA6BL,EAAQC,GAElD,GAAIK,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBP,GACpD,IAAKG,EAAI,EAAGA,EAAIK,EAAiBC,OAAQN,IACvCD,EAAMM,EAAiBL,GACnBF,EAASS,QAAQR,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,GAEzB,CACA,OAAOE,CACT,CDXyD,MACjDU,GAAKC,EAAAA,EAAAA,UAAQ,kBEcD,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CFdOG,EAAN,GAAgB,IACnC,OACE,iBAAKC,UAAWC,EAAhB,WACE,kBAAOC,QAASb,EAAIW,UAAWC,EAA/B,SAA2C7B,KAC3C,kCAAOiB,GAAIA,EAAIc,SAAU9B,GAAkBC,GAA3C,IAAkD0B,UAAWC,OAGlE,C,+GGPD,EALqB,CACjBG,MAAO,GACPC,SAAU,ICed,EAjBe,CACbD,MAAO,CACLE,KAAM,QACNC,KAAM,QACNC,UAAU,EACVC,YAAa,QACbrC,MAAO,cAETiC,SAAU,CACRC,KAAM,WACNC,KAAM,WACNC,UAAU,EACVC,YAAa,WACbrC,MAAO,kB,6BCmBX,EAzBkB,SAAC,GAAkB,IAAhBsC,EAAe,EAAfA,SACnB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDC,aAAAA,EACAF,SAAAA,IAFMG,EAAR,EAAQA,MAAOxC,EAAf,EAAeA,aAAcyC,EAA7B,EAA6BA,aAIrBV,EAAoBS,EAApBT,MAAOC,EAAaQ,EAAbR,SACf,OACE,+BACE,kBAAMK,SAAUI,EAAcd,UAAWC,EAAAA,EAAAA,KAAzC,WACE,SAAC,KAAD,QACEc,MAAOX,EACP/B,aAAcA,GACV2C,EAAAA,SAEN,SAAC,KAAD,QACED,MAAOV,EACPhC,aAAcA,GACV2C,EAAAA,YAEN,SAACC,EAAA,EAAD,wBAIP,E,wCCLD,EAlBkB,WACd,IAAMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,GACtBC,GAAWC,EAAAA,EAAAA,MAKjB,OAAIJ,GACK,SAAC,KAAD,CAAUK,GAAG,eAGlB,4BACI,SAACC,EAAA,EAAD,0BACA,SAAC,EAAD,CAAWd,SAVC,SAAAe,GAClBJ,GAASK,EAAAA,EAAAA,GAAMD,GAChB,MAWJ,C,qBCtBD,KAAgB,KAAO,4B","sources":["webpack://react-homework-template/./src/components/shared/TextField/text-field.module.css?05ad","components/shared/TextField/TextField.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/nanoid/index.browser.js","components/modules/LoginForm/initialState.js","components/modules/LoginForm/fields.js","components/modules/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","webpack://react-homework-template/./src/components/modules/RegisterForm/register-form.module.css?4ac4"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"text-field_wrapper__F5-wH\",\"label\":\"text-field_label__7jSYo\",\"input\":\"text-field_input__zcppx\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './text-field.module.css';\n\nconst TextInput = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div className={css.wrapper}>\n      <label htmlFor={id} className={css.label}>{label}</label>\n      <input id={id} onChange={handleChange} {...props} className={css.input} />\n    </div>\n  );\n};\n\nexport default TextInput;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","const initialState = {\n    email: \"\",\n    password: \"\",\n}\n\nexport default initialState;","const fields = {\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    placeholder: 'Email',\n    label: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    placeholder: 'Password',\n    label: 'User password',\n  },\n};\n\nexport default fields;\n","import TextInput from 'components/shared/TextField/TextField';\nimport useForm from '../../../hooks/useForm';\nimport initialState from './initialState';\nimport fields from './fields';\nimport css from '../RegisterForm/register-form.module.css';\nimport Button from 'components/shared/Button/Button';\n\nconst LoginForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { email, password } = state;\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <TextInput\n          value={email}\n          handleChange={handleChange}\n          {...fields.email}\n        />\n        <TextInput\n          value={password}\n          handleChange={handleChange}\n          {...fields.password}\n        />\n        <Button>Login</Button>\n      </form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import Title from '../../components/shared/Title/Title'\nimport LoginForm from 'components/modules/LoginForm/LoginForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { login } from '../../redux/auth/auth-operations';\nimport { isUserLogin } from 'redux/auth/auth-selectors'\n\nconst LoginPage = () => {\n    const isLogin = useSelector(isUserLogin);\n    const dispatch = useDispatch();\n    const handleLogin = data => {\n      dispatch(login(data));\n    };\n  \n    if (isLogin) {\n      return <Navigate to=\"/contacts\" />;\n    }\n    return (\n        <div>\n            <Title>Login page</Title>\n            <LoginForm onSubmit={handleLogin}/>\n        </div>\n    )\n}\n\nexport default LoginPage;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"register-form_form__7sl83\"};"],"names":["label","handleChange","props","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","id","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","className","css","htmlFor","onChange","email","password","type","name","required","placeholder","onSubmit","useForm","initialState","state","handleSubmit","value","fields","Button","isLogin","useSelector","isUserLogin","dispatch","useDispatch","to","Title","data","login"],"sourceRoot":""}